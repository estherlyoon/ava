# CUresult cuDeviceComputeCapability(int *major, int *minor,
#                                    CUdevice dev);
'cuDeviceComputeCapability': (c_int, POINTER(c_int), POINTER(c_int),
                            cu_device),

# CUresult cuDevicePrimaryCtxReset ( CUdevice dev )
    'cuDevicePrimaryCtxReset': (c_int, cu_device),

# CUresult cuModuleLoadDataEx(CUmodule *module, const void *image,
    #                             unsigned int numOptions,
    #                             CUjit_option *options,
    #                             void **optionValues);
    'cuModuleLoadDataEx': (c_int, cu_module, c_void_p, c_uint,
                           POINTER(cu_jit_option), POINTER(c_void_p)),

# CUresult cuModuleUnload(CUmodule hmod);
    'cuModuleUnload': (c_int, cu_module),

# CUresult cuModuleGetGlobal ( CUdeviceptr* dptr, size_t* bytes, CUmodule
    #                              hmod, const char* name )
    'cuModuleGetGlobal': (c_int, POINTER(cu_device_ptr), POINTER(c_size_t),
                          cu_module, c_char_p),

# CUresult cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize,
#                            unsigned int flags);
    'cuMemAllocManaged': (c_int, c_void_p, c_size_t, c_uint),


# CUresult cuMemcpyDtoD(CUdeviceptr dstDevice, const void *srcDevice,
#                       size_t ByteCount);
'cuMemcpyDtoD': (c_int, cu_device_ptr, cu_device_ptr, c_size_t),


# CUresult cuMemcpyDtoDAsync(CUdeviceptr dstDevice, const void *srcDevice,
#                            size_t ByteCount, CUstream hStream);
'cuMemcpyDtoDAsync': (c_int, cu_device_ptr, cu_device_ptr, c_size_t,
                        cu_stream),

# CUresult cuStreamSynchronize(CUstream hStream);
'cuStreamSynchronize': (c_int, cu_stream),


# CUresult cuLaunchCooperativeKernel(CUfunction f, unsigned int gridDimX,
#                                   unsigned int gridDimY,
#                                   unsigned int gridDimZ,
#                                   unsigned int blockDimX,
#                                   unsigned int blockDimY,
#                                   unsigned int blockDimZ,
#                                   unsigned int sharedMemBytes,
#                                   CUstream hStream, void **kernelParams)
'cuLaunchCooperativeKernel': (c_int, cu_function, c_uint, c_uint, c_uint,
                                c_uint, c_uint, c_uint, c_uint, cu_stream,
                                POINTER(c_void_p)),

# CUresult cuMemHostRegister(void * 	p,
    #                            size_t 	bytesize,
    #                            unsigned int 	Flags)
    'cuMemHostRegister': (c_int, c_void_p, c_size_t, c_uint),

# CUresult cuMemHostUnregister(void * 	p)
    'cuMemHostUnregister': (c_int, c_void_p),

# CUresult cuMemHostGetDevicePointer(CUdeviceptr * pdptr,
#                                    void *        p,
#                                    unsigned int  Flags)
'cuMemHostGetDevicePointer': (c_int, POINTER(cu_device_ptr),
                                c_void_p, c_uint),

# CUresult 	cuPointerGetAttribute (
#               void *data,
#               CUpointer_attribute attribute,
#               CUdeviceptr ptr)
'cuPointerGetAttribute': (c_int, c_void_p, c_uint, cu_device_ptr),


#    CUresult cuMemGetAddressRange (	CUdeviceptr * 	pbase,
#                                        size_t * 	psize,
#                                        CUdeviceptr 	dptr
#                                        )
'cuMemGetAddressRange': (c_int,
                            POINTER(cu_device_ptr),
                            POINTER(c_size_t),
                            cu_device_ptr),

#    CUresult cuMemHostGetFlags (	unsigned int * 	pFlags,
#                                   void * 	p )
'cuMemHostGetFlags': (c_int,
                        POINTER(c_uint),
                        c_void_p),

#   CUresult cuCtxSynchronize ( void )
    'cuCtxSynchronize' : (c_int,),

#    CUresult
#    cuLinkCreate(unsigned int numOptions, CUjit_option *options,
#                 void **optionValues, CUlinkState *stateOut);
'cuLinkCreate': (c_int,
                    c_uint, POINTER(cu_jit_option),
                    POINTER(c_void_p), POINTER(cu_link_state)),

#    CUresult
#    cuLinkAddData(CUlinkState state, CUjitInputType type, void *data,
#                  size_t size, const char *name, unsigned
#                  int numOptions, CUjit_option *options,
#                  void **optionValues);
'cuLinkAddData': (c_int,
                    cu_link_state, cu_jit_input_type, c_void_p,
                    c_size_t, c_char_p, c_uint, POINTER(cu_jit_option),
                    POINTER(c_void_p)),

#    CUresult
#    cuLinkAddFile(CUlinkState state, CUjitInputType type,
#                  const char *path, unsigned int numOptions,
#                  CUjit_option *options, void **optionValues);

'cuLinkAddFile': (c_int,
                    cu_link_state, cu_jit_input_type, c_char_p, c_uint,
                    POINTER(cu_jit_option), POINTER(c_void_p)),

#    CUresult CUDAAPI
#    cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut)
'cuLinkComplete': (c_int,
                    cu_link_state, POINTER(c_void_p), POINTER(c_size_t)),

#    CUresult CUDAAPI
#    cuLinkDestroy(CUlinkState state)
'cuLinkDestroy': (c_int, cu_link_state),

# cuProfilerStart ( void )
'cuProfilerStart': (c_int,),

# cuProfilerStop ( void )
'cuProfilerStop': (c_int,),

# CUresult CUDAAPI cuOccupancyMaxActiveBlocksPerMultiprocessor(
#                      int *numBlocks,
#                      CUfunction func,
#                      int blockSize,
#                      size_t dynamicSMemSize);
'cuOccupancyMaxActiveBlocksPerMultiprocessor': (c_int, POINTER(c_int),
                                                cu_function, c_size_t,
                                                c_uint),

# CUresult CUDAAPI cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(
#                      int *numBlocks,
#                      CUfunction func,
#                      int blockSize,
#                      size_t dynamicSMemSize,
#                      unsigned int flags);
'cuOccupancyMaxActiveBlocksPerMultiprocessorWithFlags': (c_int,
                                                            POINTER(c_int),
                                                            cu_function,
                                                            c_size_t, c_uint),

# CUresult CUDAAPI cuOccupancyMaxPotentialBlockSize(
#                      int *minGridSize, int *blockSize,
#                      CUfunction func,
#                      CUoccupancyB2DSize blockSizeToDynamicSMemSize,
#                      size_t dynamicSMemSize, int blockSizeLimit);
'cuOccupancyMaxPotentialBlockSize': (c_int, POINTER(c_int), POINTER(c_int),
                                        cu_function, cu_occupancy_b2d_size,
                                        c_size_t, c_int),


 # CUresult CUDAAPI cuOccupancyMaxPotentialBlockSizeWithFlags(
#                      int *minGridSize, int *blockSize,
#                      CUfunction func,
#                      CUoccupancyB2DSize blockSizeToDynamicSMemSize,
#                      size_t dynamicSMemSize, int blockSizeLimit,
#                      unsigned int flags);
'cuOccupancyMaxPotentialBlockSizeWithFlags': (c_int, POINTER(c_int),
                                                POINTER(c_int), cu_function,
                                                cu_occupancy_b2d_size,
                                                c_size_t, c_int, c_uint),

# CUresult cuIpcGetMemHandle ( CUipcMemHandle* pHandle, CUdeviceptr dptr )
'cuIpcGetMemHandle': (c_int,
                        POINTER(cu_ipc_mem_handle), cu_device_ptr),

# CUresult cuIpcOpenMemHandle(
#              CUdeviceptr* pdptr,
#              CUipcMemHandle handle,
#              unsigned int Flags)
'cuIpcOpenMemHandle': (c_int, POINTER(cu_device_ptr), cu_ipc_mem_handle,
                        c_uint),

# CUresult cuIpcCloseMemHandle ( CUdeviceptr dptr )

'cuIpcCloseMemHandle': (c_int, cu_device_ptr),

# CUresult cuCtxEnablePeerAccess (CUcontext peerContext, unsigned int Flags)
'cuCtxEnablePeerAccess': (c_int, cu_context, c_int),

# CUresult cuDeviceCanAccessPeer ( int* canAccessPeer,
#                                  CUdevice dev, CUdevice peerDev )
'cuDeviceCanAccessPeer': (c_int,
                            POINTER(c_int), cu_device, cu_device),